{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","renderSquare","React","Component","Game","history","stepNumber","slice","calculateWinner","setState","concat","length","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wNAyBA,SAASA,EAAOC,GACZ,OACI,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACKF,EAAMG,Q,IAMbC,E,kDAEF,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJE,E,gDAQnB,SAAaC,GAAI,IAAD,OACZ,OACI,cAACX,EAAD,CACII,MAAOQ,KAAKX,MAAMM,QAAQI,GAC1BR,QAAS,kBAAM,EAAKF,MAAME,QAAQQ,Q,oBAK9C,WACI,OACI,gCACI,sBAAKT,UAAU,YAAf,UACKU,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,MAEvB,sBAAKX,UAAU,YAAf,UACKU,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,MAEvB,sBAAKX,UAAU,YAAf,UACKU,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,a,GAnCnBC,IAAMC,WA2CpBC,E,kDACF,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTW,QAAS,CAAC,CACNV,QAASC,MAAM,GAAGC,KAAK,QAE3BS,WAAY,EACZR,SAAS,GAPE,E,+CAWnB,SAAYC,GACR,IAAMM,EAAUL,KAAKN,MAAMW,QAAQE,MAAM,EAAGP,KAAKN,MAAMY,WAAa,GAE9DX,EADUU,EAAQL,KAAKN,MAAMY,YACXX,QAAQY,QAE5BC,EAAgBb,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKS,SAAS,CACVJ,QAASA,EAAQK,OAAO,CAAC,CAErBf,QAASA,KAEbW,WAAYD,EAAQM,OACpBb,SAAUE,KAAKN,MAAMI,a,oBAI7B,SAAOc,GACHZ,KAAKS,SAAS,CACVH,WAAYM,EACZd,QAAUc,EAAO,IAAO,M,oBAIhC,WAAU,IAcFC,EAdC,OACCR,EAAUL,KAAKN,MAAMW,QACrBS,EAAUT,EAAQA,EAAQM,OAAS,GACnCI,EAASP,EAAgBM,EAAQnB,SAEjCqB,EAAQX,EAAQY,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAC5C,OACI,6BACI,wBAAQ3B,QAAS,kBAAM,EAAK6B,OAAOF,IAAnC,SAA2CC,KADtCD,MAajB,OALIL,EADAE,EACS,WAAaA,EAEb,iBAAmBf,KAAKN,MAAMI,QAAU,IAAM,KAIvD,sBAAKR,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACG,EAAD,CACIE,QAASmB,EAAQnB,QACjBJ,QAAS,SAACQ,GAAD,OAAO,EAAKsB,YAAYtB,QAGzC,sBAAKT,UAAU,YAAf,UACI,8BAAMuB,IACN,6BAAKG,c,GArENd,IAAMC,WA4EzB,SAASK,EAAgBb,GAWrB,IAVA,IAAM2B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFvB,EAAI,EAAGA,EAAIuB,EAAMX,OAAQZ,IAAK,CACnC,kBAAkBuB,EAAMvB,GAAxB,GAAOwB,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GAClE,OAAO9B,EAAQ4B,GAGvB,OAAO,KAIXG,IAASC,OACL,cAACvB,EAAD,IACAwB,SAASC,eAAe,W","file":"static/js/main.5db6cfc2.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Square 組件渲染一個<button>正方形  // controlled components，Board Class 有完全控制權\n// class Square extends React.Component {\n//     // 添加一個構造函數來初始化狀態\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             value: null,\n//         };\n//     }\n//     render() {\n//         return (\n//             <button\n//                 className=\"square\"\n//                 onClick={() => props.onClick()}\n//             >\n//                 {this.props.value}\n//             </button>\n//         );\n//     }\n// }\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\n// Board 渲染 9 個正方形\nclass Board extends React.Component {\n    // 初始狀態：9 個方格＆9 個空值的數組\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),     // Array.prototype.fill()，fill() 方法會將陣列中索引的第一個到最後一個的每個位置全部填入一個靜態的值。\n            xIsNext: true,\n        };\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />   // 父 Board 組件向子 Square 組件 “傳遞了一個 props”\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\n// Game 渲染帶有佔位符值的板\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[this.state.stepNumber];\n        const squares = current.squares.slice();\n        // slice() 方法會回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。而原本的陣列將不會被修改。 -> immutable\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                //.concat() 合併兩個或多個陣列。此方法不會改變現有的陣列，回傳一個包含呼叫者陣列本身的值，作為代替的是回傳一個新陣列。\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}